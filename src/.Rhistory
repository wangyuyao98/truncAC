library(boot)
library(survival)
library(randomForestSRC)
library(LTRCforests)
library(cvTools)  # used for creating folds for cross-fitting
library(glmnet)
library(Matrix)
library(splines)
library(survPen)
library(gbm)
getwd()
source("est_nuisance.R")
source("misc.R")
source("truncAIPW.R")
source("truncAC_AIPW.R")
source("truncC_AIPW.R")
# For ATE
source("truncAC_AIPW_cf.R")
source("ATE_naive.R")
dat =  read.csv("~/Documents/research/R03 data/datasets/3bias/AgeX4_AgeDeathCog_n1953.csv")
dat$Q = dat$AgeX4
tau = max(dat$X)+1
tau     # 102.6
dat$X2 = tau - dat$X
dat$Q2 = tau - dat$Q
# dichotomize the alcohol consumption into heavy/light (heavy in either Exam 1 or 3 / otherwise)
dat$AlcoholHL = as.numeric(dat$AlcoholX1 > 1.2*365.25/12 | dat$AlcoholX3 > 1.2*365.25/12)
dat$smokeYN = as.numeric(dat$PackYearsX3 > 0)
### Parameters setup -----------------------------------------------------------------
n.boot = 2  # How many bootstrap for each job
load("t00_seed.rda")
nu <- function(t,t0=t00){
# indicator function
result = as.numeric(t>t0)
# result = pmin(t, t0)
# result = log(t)
return(result)
}
X.name = "X"
Q.name = "Q"
A.name = "AlcoholHL"
event.name = "delta"
event.name.T = "delta"
cov.names.T = c("Education", "SystolicBP", "HeartRate")
cov.names.Q = c("Education", "SystolicBP", "HeartRate")
cov.names.A = c("Education", "SystolicBP", "HeartRate")
cov.names.D = c("Q","Education", "SystolicBP", "HeartRate")
cov.names.binary.T = c("AlcoholHL", "E4Positive")
cov.names.binary.Q = c("AlcoholHL", "E4Positive")
cov.names.binary.A = c("E4Positive")
cov.names.binary.D = c("AlcoholHL", "E4Positive")
est_approach_G = "IPCW"   #  "IPCW" (censoring weighting) or "truncIPW.F" (truncation weighting using 1/(1-F))
est_approach_PS = "truncIPCW"   # "truncIPCW" (censoring weighting) or "truncIPW.F" (truncation weighting using 1/(1-F))
K = 5   # K-fold cross-fitting
trim = 0.05
trim.est = 0
# Setups for the nuisance parameter estimates
# For now, still assume an additive form for different covariates and the time variable
formula_survPen.T = ~ smf(X, df = 5) + smf(Education, df = 5) + smf(SystolicBP, df = 5) + smf(HeartRate, df = 5) + AlcoholHL + E4Positive
formula_survPen.D = ~ smf(Y, df = 5) + smf(Education, df = 5) + smf(SystolicBP, df = 5) + smf(HeartRate, df = 5) + AlcoholHL + E4Positive
# In the function est_Sd(), Y is defined to be X-Q
options.F = list(trim = trim.est,
ntree = 500, mtry = 2,
df = 3, nfolds = 10, s = "lambda.min", alpha = 0,
formula.survPen = formula_survPen.T)
options.Sd = list(trim = trim.est,
ntree = 500, mtry = 2,
df = 3, nfolds = 10, s = "lambda.min", alpha = 0,
formula.survPen = formula_survPen.D)
options.G = list(trim = trim.est,
df = 3, nfolds = 10, s = "lambda.min", alpha = 0,
trunc.weighting = TRUE)
options.PS = list(trim = trim.est,
df = 3,
ntree = 500)
######## Estimating ATE ########## ------------------------------------------------------------
### cf estimator
set.seed(seed)
model.T = "pCox"  # "Cox", pCox", "survPen", "RF"
model.Q = "pCox"  # "Cox", pCox"
model.A = "gbm"   # "logistic", "gbm"
model.D = "pCox"  # "Cox", pCox", "survPen", "RF"
### Debug -- run the function `cf_truncAC_AIPW()` line-by-line ---------------------
Fuz.mx = NULL
Fuz_A1.mx = NULL
Fuz_A0.mx = NULL
Gvz.mx = NULL
Sdz.mx = NULL
PS = NULL
simulation = FALSE
dat_A1 = dat
dat_A1[,A.name] <- 1
dat_A0 = dat
dat_A0[,A.name] <- 0
if(simulation){
dat_A1[,"AZ1"] = dat_A1[,A.name] * dat_A1[,"Z1"]    # need to change these two lines if the name of the covariates changes
dat_A0[,"AZ1"] = dat_A0[,A.name] * dat_A0[,"Z1"]
}
if(is.null(Gvz.mx)){
names = c(X.name, Q.name, event.name, A.name, cov.names.T, cov.names.Q, cov.names.A, cov.names.D)
if(sum(names == "delta.1")){
stop("The names of the variables cannot be 'delta.1'. It is used in the middle of the computation.")
}
dat$delta.1 = rep(1, nrow(dat))
event.name.Q = "delta.1"
}
event.name.T = event.name
n = nrow(dat)
folds <- cvFolds(n, K)
jumps.X = sort(dat[,X.name])
jumps.Q = sort(dat[,Q.name])
jumps.Y = sort(dat[,X.name] - dat[,Q.name])
tau1 = min(jumps.X)
tau2 = max(jumps.Q)
tau3 = max(jumps.Y)
tau.max = max(jumps.X)
# Compute \V{\nu} and \V{1} using out of fold estimate of the nuisance parameters
truncC_AIPW_1 = rep(NA, n)  # \V{1}
truncC_AIPW_nuT = rep(NA, n)  # \V{\nu(T)}
# Store some intermediate results that are useful for constructing IPW and naive estimators
mu0_hat = rep(NA, n)
mu1_hat = rep(NA, n)
GXZ_hat = rep(NA, n)
SdXZ_hat = rep(NA, n)
PS_hat = rep(NA, n)
# ct = 0
folds <- cvFolds(n, K)
k=1
id.est = folds$subsets[folds$which == k]
id.fit = folds$subsets[folds$which != k]
dat.est = dat[id.est, ]
dat.fit = dat[id.fit, ]
dat_A1.est = dat_A1[id.est, ]
dat_A0.est = dat_A0[id.est, ]
if(is.null(Fuz.mx)){
u = c(min(jumps.X)-1e-10, jumps.X, max(jumps.X)+1e-10)
# ### Begin debug -- line-by-line -----------------------------------------------------
# time.eval = u
# model = model.T
# time.name = X.name
# Q.name = Q.name
# event.name = event.name.T
# cov.names = cov.names.T
# cov.names.binary = cov.names.binary.T
# trim = options.F$trim
# mtry = options.F$mtry
# ntree = options.F$ntree
# formula.survPen = options.F$formula.survPen
# nfolds = options.F$nfolds
# s = options.F$s
# alpha = options.F$alpha
# lambda = options.F$lambda
# df = options.F$df
# Fuz.mx = NULL
# Fuz_A1.mx = NULL
# Fuz_A0.mx = NULL
# Gvz.mx = NULL
# Sdz.mx = NULL
# PS = NULL
# weights = NULL
# ### End debug -----------------------------------------------------------------------
Fuz.mx.est = est_F(dat.fit, dat.est, u, model.T, X.name, Q.name, event.name.T,
cov.names = cov.names.T, cov.names.binary = cov.names.binary.T,
trim = options.F$trim,
mtry = options.F$mtry, ntree = options.F$ntree,
formula.survPen = options.F$formula.survPen,
nfolds = options.F$nfolds, s = options.F$s, alpha = options.F$alpha,
lambda = options.F$lambda, df = options.F$df)
}else{
Fuz.mx.est = Fuz.mx[id.est, ]
}
if(is.null(Fuz_A1.mx)){
u_A1 = c(min(jumps.X)-1e-10, jumps.X, max(jumps.X)+1e-10)
Fuz_A1.mx.est = est_F(dat.fit, dat_A1.est, u_A1, model.T, X.name, Q.name, event.name.T,
cov.names = cov.names.T, cov.names.binary = cov.names.binary.T,
trim = options.F$trim,
mtry = options.F$mtry, ntree = options.F$ntree,
formula.survPen = options.F$formula.survPen,
nfolds = options.F$nfolds, s = options.F$s, alpha = options.F$alpha,
lambda = options.F$lambda, df = options.F$df)
}else{
Fuz_A1.mx.est = Fuz_A1.mx[id.est, ]
u_A1 = as.numeric(colnames(Fuz_A1.mx))
}
if(is.null(Fuz_A0.mx)){
u_A0 = c(min(jumps.X)-1e-10, jumps.X, max(jumps.X)+1e-10)
Fuz_A0.mx.est = est_F(dat.fit, dat_A0.est, u_A0, model.T, X.name, Q.name, event.name.T,
cov.names = cov.names.T, cov.names.binary = cov.names.binary.T,
trim = options.F$trim,
mtry = options.F$mtry, ntree = options.F$ntree,
formula.survPen = options.F$formula.survPen,
nfolds = options.F$nfolds, s = options.F$s, alpha = options.F$alpha,
lambda = options.F$lambda, df = options.F$df)
}else{
Fuz_A0.mx.est = Fuz_A0.mx[id.est, ]
u_A0 = as.numeric(colnames(Fuz_A0.mx))
}
## Estimate S_D
if(is.null(Sdz.mx)){
d = c(min(jumps.Y)-1e-10, jumps.Y, max(jumps.Y)+1e-10)
Sdz.mx.est = est_Sd(dat.fit, dat.est, d, model.D, X.name, Q.name, event.name.T,
cov.names = cov.names.D, cov.names.binary = cov.names.binary.D,
trim = options.Sd$trim,
mtry = options.Sd$mtry, ntree = options.Sd$ntree,
formula.survPen = options.Sd$formula.survPen,
nfolds = options.Sd$nfolds, s = options.Sd$s, alpha = options.Sd$alpha,
lambda = options.Sd$lambda, df = options.Sd$df)   # d taking values on the residual time scale
}else{
Sdz.mx.est = Sdz.mx[id.est, ]
}
## Estimate G - using truncation weights 1/{1-F(Q|A,Z)} estimated using fit.si, and use fit.sj to estimate G, i\neq j \in \{1,2\}
v = c(tau1-1e-10, jumps.Q[jumps.Q>=tau1], max(jumps.Q)+1e-10)
# v = c(tau1-1e-10, jumps.Q, max(jumps.Q)+1e-10)
if(is.null(Gvz.mx)){
if(est_approach_G == "truncIPW.F"){
Fq.vec.fit = NULL
# Compute the truncation weights 1/{1-F(Q|A,Z)}
if(is.null(Fuz.mx)){
Fq.vec.fit = diag(est_F(dat.fit, dat.fit, dat.fit[,Q.name],
model.T, X.name, Q.name, event.name.T,
cov.names = cov.names.T, cov.names.binary = cov.names.binary.T,
trim = options.F$trim,
mtry = options.F$mtry, ntree = options.F$ntree,
formula.survPen = options.F$formula.survPen,
nfolds = options.F$nfolds, s = options.F$s, alpha = options.F$alpha,
lambda = options.F$lambda, df = options.F$df))
}else{
Fq.vec.fit = CDF_eval(dat.fit[ ,Q.name], Fuz.mx[id.fit,])
}
w_truncF.fit = 1/pmax(1-Fq.vec.fit, trim)
# Estimate G using fit.s2
Gvz.mx.est = est_G(dat.fit, dat.est, v, model.Q, X.name, Q.name, event.name.Q,
cov.names = cov.names.Q, cov.names.binary = cov.names.binary.Q,
weights = w_truncF.fit, trunc = FALSE,
tau = tau.max, trim = options.G$trim,
formula.survPen = options.G$formula.survPen,
nfolds = options.G$nfolds, s = options.G$s, alpha = options.G$alpha,
lambda = options.G$lambda, df = options.G$df)
}else if(est_approach_G == "IPCW"){
id.fit_1 = (dat.fit[, event.name.T] == 1)
dat.fit_1 = dat.fit[id.fit_1, ]
X.res_1 = dat.fit_1[,X.name] - dat.fit_1[,Q.name]
# Estimate the censoring weights
if(is.null(Sdz.mx)){
Sdy.vec.fit_1 = diag(est_Sd(dat.fit, dat.fit_1, X.res_1,
model.D, X.name, Q.name, event.name.T,
cov.names = cov.names.D, cov.names.binary = cov.names.binary.D,
trim = options.Sd$trim,
mtry = options.Sd$mtry, ntree = options.Sd$ntree,
formula.survPen = options.Sd$formula.survPen,
nfolds = options.Sd$nfolds, s = options.Sd$s, alpha = options.Sd$alpha,
lambda = options.Sd$lambda, df = options.Sd$df))
}else{
Sdy.vec.fit_1 = 1- CDF_eval(X.res_1, 1-Sdz.mx[id.fit,][id.fit_1,])
}
w_IPCW_1 = 1/pmax(Sdy.vec.fit_1, trim)
Gvz.mx.est = est_G(dat.fit_1, dat.est, v, model.Q, X.name, Q.name, event.name.Q,
cov.names = cov.names.Q, cov.names.binary = cov.names.binary.Q,
weights = w_IPCW_1, tau = tau.max,
trim = options.G$trim,
formula.survPen = options.G$formula.survPen,
nfolds = options.G$nfolds, s = options.G$s, alpha = options.G$alpha,
lambda = options.G$lambda, df = options.G$df)
}else{
stop("'est_approach_G' Should be either 'truncIPW.F' or 'IPCW'. ")
}
}else{
Gvz.mx.est = Gvz.mx[id.est, ]
}
## Estimate PS
if(is.null(PS)){
if(est_approach_PS == "truncIPW.F"){
if(is.null(Fq.vec.fit)){ # The truncation weights from F haven't been computed yet
# Compute the truncation weights 1/{1-F(Q|A,Z)} estimated using fit.s1
if(is.null(Fuz.mx)){
Fq.vec.fit = diag(est_F(dat.fit, dat.fit, dat.fit[,Q.name],
model.T, X.name, Q.name, event.name.T,
cov.names = cov.names.T, cov.names.binary = cov.names.binary.T,
trim = options.F$trim,
mtry = options.F$mtry, ntree = options.F$ntree,
formula.survPen = options.F$formula.survPen,
nfolds = options.F$nfolds, s = options.F$s, alpha = options.F$alpha,
lambda = options.F$lambda, df = options.F$df))
}else{
Fq.vec.fit = CDF_eval(dat.fit[ ,Q.name], Fuz.mx[id.fit,])
}
w_truncF.fit = 1/pmax(1-Fq.vec.fit, trim)
} # End if(is.null(Fq.vec.fit))
# Estimate PS using truncation weights 1/(1-F(Q|A,Z))
PS.est = est_PS(dat.fit, dat.est, model.A, A.name,
cov.names = cov.names.A, cov.names.binary = cov.names.binary.A,
weights = w_truncF.fit,
trim = options.PS$trim, df = options.PS$df,
ntree = options.PS$ntree)   # a vector of estimated PS for each individual
}else if(est_approach_PS == "truncIPCW"){
id.fit_1 = (dat.fit[, event.name.T] == 1)
dat.fit_1 = dat.fit[id.fit_1, ]
X.res_1 = dat.fit_1[,X.name] - dat.fit_1[,Q.name]
X_1 = dat.fit_1[,X.name]
# Compute the IPCW weights
if(is.null(Sdz.mx)){
Sdy.vec.fit = diag(est_Sd(dat.fit, dat.fit_1, X.res_1,
model.D, X.name, Q.name, event.name.T,
cov.names = cov.names.D, cov.names.binary = cov.names.binary.D,
trim = options.Sd$trim,
mtry = options.Sd$mtry, ntree = options.Sd$ntree,
formula.survPen = options.Sd$formula.survPen,
nfolds = options.Sd$nfolds, s = options.Sd$s, alpha = options.Sd$alpha,
lambda = options.Sd$lambda, df = options.Sd$df))
}else{
Sdy.vec.fit = 1- CDF_eval(X.res_1, 1-Sdz.mx[id.fit,][id.fit_1,])
}
# IPCW weights
w_IPCW.fit_1 = 1/pmax(Sdy.vec.fit, trim)   # for the uncensored subjects
if(is.null(Gvz.mx)){
# For uncensored subjects
Gx.vec.fit_1 = diag( est_G(dat.fit_1, dat.fit_1, X_1, model.Q, X.name, Q.name, event.name.Q,
cov.names = cov.names.Q, cov.names.binary = cov.names.binary.Q,
weights = w_IPCW.fit_1, tau = tau.max,
trim = options.G$trim,
formula.survPen = options.G$formula.survPen,
nfolds = options.G$nfolds, s = options.G$s, alpha = options.G$alpha,
lambda = options.G$lambda, df = options.G$df) )
}else{
Gx.vec.fit_1 = CDF_eval(X_1, Gvz.mx[id.fit,][id.fit_1,])  # For uncensored subjects
}
w_trunc.fit_1 = 1/pmax(Gx.vec.fit_1, trim)
# Estimate PS using uncensored subjects with weights 1/{G(X|A,Z)S_D(X-Q|A,Z)}
PS.est = est_PS(dat.fit_1, dat.est, model.A, A.name,
cov.names = cov.names.A, cov.names.binary = cov.names.binary.A,
weights = w_trunc.fit_1 * w_IPCW.fit_1,
trim = options.PS$trim, df = options.PS$df,
ntree = options.PS$ntree)
}else{
stop("'est_approach_PS' Should be either 'truncIPW.F' or 'truncIPCW'. ")
}
}else{
PS.est = PS[id.est]
}
# Compute the mu_1(Z), mu_0(Z) for the treatment augmentation, and m(Z) invoved in the R-learner
nuuT_A1.mx = matrix(rep(nu(u_A1), nrow(dat.est)), nrow = nrow(dat.est), byrow = TRUE)
nuuT_A0.mx = matrix(rep(nu(u_A0), nrow(dat.est)), nrow = nrow(dat.est), byrow = TRUE)
tau.Tmax_A1 = max(u_A1) + 1e-5
tau.Tmax_A0 = max(u_A0) + 1e-5
mu_A1.est = as.vector(int_fmx_dF(tau.Tmax_A1, nuuT_A1.mx, Fuz_A1.mx.est))
mu_A0.est = as.vector(int_fmx_dF(tau.Tmax_A0, nuuT_A0.mx, Fuz_A0.mx.est))
# Compute \V{1}, \V{\nu}
truncC_AIPW_result <- truncC_AIPW_transMean(dat.est, nu, Fuz.mx.est, Gvz.mx.est, Sdz.mx.est,
X.name, Q.name, event.name, trim)
# truncCAIPW_const1 = truncC_AIPW_result$truncC_const1
truncC_AIPW_1[id.est] = truncC_AIPW_result$truncC_const1
truncC_AIPW_nuT[id.est] = truncC_AIPW_result$truncC_nu
### Record some intermediate quantities
mu1_hat[id.est] = mu_A1.est
mu0_hat[id.est] = mu_A0.est
PS_hat[id.est] = PS.est
GXZ_hat[id.est] = CDF_eval(dat.est[,X.name], Gvz.mx.est)
SdXZ_hat[id.est] = 1 - CDF_eval(dat.est[,X.name] - dat.est[,Q.name], 1-Sdz.mx.est)
t0
t0 = 90
t00 = 90
nu
summary(truncC_AIPW_1[id.est] )
summary(truncC_AIPW_nuT[id.est])
truncC_AIPW_result$truncC_const1
# Compute the mu_1(Z), mu_0(Z) for the treatment augmentation, and m(Z) invoved in the R-learner
nuuT_A1.mx = matrix(rep(nu(u_A1), nrow(dat.est)), nrow = nrow(dat.est), byrow = TRUE)
nuuT_A0.mx = matrix(rep(nu(u_A0), nrow(dat.est)), nrow = nrow(dat.est), byrow = TRUE)
tau.Tmax_A1 = max(u_A1) + 1e-5
tau.Tmax_A0 = max(u_A0) + 1e-5
mu_A1.est = as.vector(int_fmx_dF(tau.Tmax_A1, nuuT_A1.mx, Fuz_A1.mx.est))
mu_A0.est = as.vector(int_fmx_dF(tau.Tmax_A0, nuuT_A0.mx, Fuz_A0.mx.est))
# Compute \V{1}, \V{\nu}
truncC_AIPW_result <- truncC_AIPW_transMean(dat.est, nu, Fuz.mx.est, Gvz.mx.est, Sdz.mx.est,
X.name, Q.name, event.name, trim)
# truncCAIPW_const1 = truncC_AIPW_result$truncC_const1
truncC_AIPW_1[id.est] = truncC_AIPW_result$truncC_const1
truncC_AIPW_nuT[id.est] = truncC_AIPW_result$truncC_nu
### Record some intermediate quantities
mu1_hat[id.est] = mu_A1.est
mu0_hat[id.est] = mu_A0.est
PS_hat[id.est] = PS.est
GXZ_hat[id.est] = CDF_eval(dat.est[,X.name], Gvz.mx.est)
SdXZ_hat[id.est] = 1 - CDF_eval(dat.est[,X.name] - dat.est[,Q.name], 1-Sdz.mx.est)
summary(truncCAIPW_const1)
truncC_AIPW_result
summary(truncC_AIPW_1[id.est])
summary(truncC_AIPW_nuT[id.est])
boxplot(truncC_AIPW_nuT[id.est])
id = which.min(truncC_AIPW_nuT[id.est])
id
# Compute \V{1}, \V{\nu}
# Debug line-by-line ------------------------------------------------------
dat = dat.est
nu = nu
Fuz.mx = Fuz.mx.est
Gvz.mx = Gvz.mx.est
Sdz.mx = Sdz.mx.est
X.name = X.name
Q.name = Q.name
event.name = event.name
trim = trim
X.res = dat[,X.name] - dat[,Q.name]
# apply truncAIPW
efs = truncAIPW_transMean_EF(dat, nu, Fuz.mx, Gvz.mx, X.name, Q.name, trim)
Num_AIPW = efs$Num_AIPW
Den_AIPW = efs$Den_AIPW
Num_IPW.Q = efs$Num_IPW.Q
Den_IPW.Q = efs$Den_IPW.Q
# compute the IPCW weights
Sdyz.vec = diag(1 - CDF_eval.mx(X.res, 1-Sdz.mx))
id1 = (dat[, event.name] == 1)
w_IPCW = rep(0, nrow(dat))
w_IPCW[id1] = 1/pmax(Sdyz.vec[id1], trim)
result_Aug_QD = aug_QD(dat, nu, Fuz.mx, Gvz.mx, Sdz.mx, Sdyz.vec,
X.name, Q.name, event.name, trim)
Aug_QD_nu = result_Aug_QD$Aug_QD_nu
Aug_QD_const1 = result_Aug_QD$Aug_QD_const1
truncC_nu = w_IPCW * Num_AIPW + Aug_QD_nu
truncC_const1 = w_IPCW * Den_AIPW + Aug_QD_const1
trim
w_IPCW * Num_AIPW
summary(w_IPCW * Num_AIPW)
summary(w_IPCW)
summary(w_IPCW * Den_AIPW)
if(nrow(dat) != nrow(Fuz.mx) | nrow(dat) != nrow(Gvz.mx)){
stop("The number of rows of dat, Fuz.mx and Gvz.mx are not the same. ")
}
time = dat[, T.name]
T.name = X.name
time = dat[, T.name]
Q = dat[, Q.name]
u = as.numeric(colnames(Fuz.mx))  # jumps.T
v = as.numeric(colnames(Gvz.mx))  # jumps.Q
tau2 = max(v)+1e-10
Gtz = CDF_eval(time, Gvz.mx)
Gqz = CDF_eval(Q, Gvz.mx)
Fqz = CDF_eval(Q, Fuz.mx)
DDen1 = 1/pmax(Gtz, trim)
DDen2 = Fqz/(pmax(Gqz, trim)*pmax(1-Fqz, trim))
summary(DDen1)
DDen2 = Fqz/(pmax(Gqz, trim)*pmax(1-Fqz, trim))
summary(DDen2)
Fvz.mx = CDF_eval.mx(v, Fuz.mx)
nn = nrow(dat)
atrisk.mx = matrix(nrow = nn, ncol = length(v))
for(i in 1:nn){
atrisk.mx[i,] = (Q[i] <= v & v < time[i])    # at risk indicator for subject i at times in jumps.Q
}
f.mx = atrisk.mx*Fvz.mx/(pmax(Gvz.mx, trim)^2*pmax(1-Fvz.mx, trim))
DDen3 = as.vector(int_fmx_dF(tau2, f.mx, Gvz.mx))
summary(DDen3)
NNum1 = nu(time)/pmax(Gtz, trim)
summary(NNum1)
nuu.mx = matrix(rep(nu(u), nrow(dat)), nrow = nrow(dat), byrow = TRUE)
mqz = diag(int_fmx_dF(Q, nuu.mx, Fuz.mx))
NNum2 = mqz/(pmax(Gqz, trim)*pmax(1-Fqz, trim))
summary(mqz)
mvz.mx = int_fmx_dF(v, nuu.mx, Fuz.mx)
fnu.mx = atrisk.mx*mvz.mx/(pmax(Gvz.mx, trim)^2*pmax(1-Fvz.mx, trim))
NNum3 = as.vector(int_fmx_dF(tau2, fnu.mx, Gvz.mx))
Num_AIPW = NNum1 + NNum2 - NNum3
Den_AIPW = DDen1 + DDen2 - DDen3
summary(NNum2)
summary(NNum3)
summary(NNum1)
# For the estimating equation of the IPW and Reg.T1, Reg.T2 estimators
DDen4 = 1/pmax(1-Fqz, trim)
NNum4 = nu(time) + mqz/pmax(1-Fqz, trim)
tau.Tmax = max(u) + 1
Enutz = as.vector(int_fmx_dF(tau.Tmax, nuu.mx, Fuz.mx))
NNum5 = Enutz/pmax(1-Fqz, trim)
# apply truncAIPW
efs = truncAIPW_transMean_EF(dat, nu, Fuz.mx, Gvz.mx, X.name, Q.name, trim)
Num_AIPW = efs$Num_AIPW
Den_AIPW = efs$Den_AIPW
Num_IPW.Q = efs$Num_IPW.Q
Den_IPW.Q = efs$Den_IPW.Q
# compute the IPCW weights
Sdyz.vec = diag(1 - CDF_eval.mx(X.res, 1-Sdz.mx))
id1 = (dat[, event.name] == 1)
w_IPCW = rep(0, nrow(dat))
summary(w_IPCW )
w_IPCW[id1] = 1/pmax(Sdyz.vec[id1], trim)
summary(w_IPCW)
result_Aug_QD = aug_QD(dat, nu, Fuz.mx, Gvz.mx, Sdz.mx, Sdyz.vec,
X.name, Q.name, event.name, trim)
if(sum(is.na(Sdyz.vec))>0){
X.res = dat[,X.name] - dat[,Q.name]
Sdyz.vec = diag(1 - CDF_eval.mx(X.res, 1-Sdz.mx))
}
aug_result_1 = aug_QD_1(dat, nu, Fuz.mx, Gvz.mx, Sdz.mx, X.name, Q.name, event.name, trim)
aug_result_2 = aug_QD_2(dat, nu, Fuz.mx, Gvz.mx, Sdyz.vec, Q.name, event.name, trim)
aug_result_3 = aug_QD_3(dat, nu, Fuz.mx, Gvz.mx, Sdz.mx, X.name, Q.name, event.name, trim)
summary(aug_result_1)
summary(aug_result_2)
summary(aug_result_3)
Aug_QD_nu_2 = aug_result_2$aug_2
Aug_QD_nu_3 = aug_result_3$aug_3
Aug_QD_nu = Aug_QD_nu_1 + Aug_QD_nu_2 - Aug_QD_nu_3
summary(Aug_QD_nu_2)
summary(Aug_QD_nu_3)
aug_result_1 = aug_QD_1(dat, nu, Fuz.mx, Gvz.mx, Sdz.mx, X.name, Q.name, event.name, trim)
Aug_QD_nu_1 = aug_result_1$aug_1
Aug_QD_const1_1 = aug_result_1$aug_1_const1
Aug_QD_const1_2 = aug_result_2$aug_2_const1
Aug_QD_const1_3 = aug_result_3$aug_3_const1
Aug_QD_const1 = Aug_QD_const1_1 + Aug_QD_const1_2 - Aug_QD_const1_3
summary(Aug_QD_const1)
5.59、180
5.59/180
6.00/270
